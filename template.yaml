# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 180
    Tracing: Active
    Environment:
      Variables:
        TABLE_NAME: !Ref AccountsTable

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev

  RootWelcome:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      CodeUri: ./dist/handlers/root
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  MenuWelcome:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      CodeUri: ./dist/handlers/menu
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/menu
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  MenuFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.post
      CodeUri: ./dist/handlers/menu
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/menu
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  EnrolWelcome:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      CodeUri: ./dist/handlers/enrol
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/enrol
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  EnrolFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.post
      CodeUri: ./dist/handlers/enrol
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/enrol/{phraseKey}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  VerificationWelcome:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      CodeUri: ./dist/handlers/verify
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/verify
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
  VerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.post
      CodeUri: ./dist/handlers/verify
      Role: !GetAtt LambdaRole.Arn
      Events:
        HTTP:
          Type: Api
          Properties:
            Path: /{lang}/verify/{phraseKey}
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: LambdaAccessDynamo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: !GetAtt AccountsTable.Arn

Outputs:
  APIEndpoint:
    Description: 'API Endpoint'
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/dev/fr-FR'
